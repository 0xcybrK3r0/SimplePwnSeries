#!/usr/bin/python3

from cmd import Cmd
import sys
import pprint as pp
import json
import requests
import signal

class Terminal(Cmd):
    intro = 'Simple script for zabbix API 3.0 used in ZIPPER Hack the Box machine \n Type help or ? to list commands'
    prompt = '> '
    
    def __init__(self):
        self.auth = self.do_login("zapper zapper")
        Cmd.__init__(self)

    def api_call(self, method, params, auth ,id):
        url = 'http://10.10.10.108/zabbix/api_jsonrpc.php'
        header = { "content-type" : "application/json" }
        payload = {
                "jsonrpc": "2.0",
                "method": method,
                "params": params,
                "auth": auth,
                "id": id
                }
        response =  requests.post(url, data=json.dumps(payload), headers=(header))
        return response.json()

    def do_login(self, args):
        user,password = args.split()
        params = {
                "user": user,
                "password": password,
                }
        auth = self.api_call("user.login", params, None, 0)
        return auth['result']

    
    def do_getGroups(self, args):
        'list all Zabbix groups'
        params = {
                "status": 0
                }
        output = self.api_call("usergroup.get", params, self.auth, 0)
        pp.pprint(output)

    def do_getUsers(self, args):
        'List all Zabbix users'
        params = {
                "getAccess":1,
                }
        output = self.api_call("user.get", params, self.auth, 0)
        pp.pprint(output)


    def do_CreateUser(self, args):
        'Create a user in Zabbix   Params: user (ex. zabbix) password (ex. admin)'
        user,password =  args.split()
        params = {
                "alias":user,
                "name":user,
                "passwd":password,
                "usrgrps": [ { "usrgrpid": "7" } ]
                }
        users = self.api_call("user.create", params, self.auth, 0)
        pp.pprint(users)

    def do_makeAdmin(self, args):
        'Upgrade a user to admin   Params: userid (ex. 4)'
        params = {
                "userid":args,
                "type":3
                }
        output = self.api_call("user.update", params, self.auth, 0)
        pp.pprint(output)


    def do_getUserInfo(self, args):
        'List user related information   Params: user (ex. admin)'
        params = {
                "filter":{
                    "alias":args
                    }
                }

        output = self.api_call("user.get", params, self.auth, 0)
        #pp.pprint(output)
        find = re.findall("userid", output)
        print(find)



    def do_CreateScript(self, args):
        'Create script   Params: name (ex. shell) command (ex. /bin/bash)'
        name,command = args.split()
        params = {
                "name":name,
                "command":command,
                }
        output = self.api_call("script.create", params, self.auth, 0)
        pp.pprint(output)

    def do_scriptExec(self, args):
        'Run script   Params: scriptid  (ex. 4) hostid  (ex. 10105)'
        scrid,hostid = args.split()
        params = {
                "scriptid":scrid,
                "hostid":hostid,
                }
        output = self.api_call("script.execute", params, self.auth, 0)
        pp.pprint(output)

    def do_scriptUpdate(self, args):
        'Update script   Params: scriptid (ex. 4) command (ex. ping 10.10.10.10)'
        scrid,command = args.split()
        params = {
                "scriptid":scrid,
                "command":command,
                 }
        output = self.api_call("script.update", params, self.auth, 0)
        pp.pprint(output)


    def do_Auth(self, args):
        print(self.auth)


def sig_handler(sig, frame):
    print("\n\n[*] Exiting...\n")
    sys.exit(0)
signal.signal(signal.SIGINT, sig_handler)

terminal = Terminal()
terminal.cmdloop()
